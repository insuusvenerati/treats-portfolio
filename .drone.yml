kind: pipeline
type: docker
name: default

trigger:
  branch:
    exclude:
      - renovate/*

steps:
  - name: restore-cache-with-filesystem
    image: meltwater/drone-cache:dev
    pull: 'always'
    volumes:
      - name: cache
        path: /usr/local/share/.cache
    settings:
      restore: true
      cache_key: '{{ .Repo.Name }}-{{ checksum "yarn.lock" }}'
      archive_format: 'gzip'
      bucket: stiforr-drone-cache
      region: us-east-1
      # filesystem_cache_root: "/tmp/cache"
      mount:
        - './.cache'
        - './public'
        - '/usr/local/share/.cache'
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key

  - name: install
    image: node:lts-buster-slim
    volumes:
      - name: cache
        path: /usr/local/share/.cache
    commands:
      - yarn install --frozen-lockfile
      - yarn cache dir
    when:
      branch:
        include:
          - main
          - develop
          - 'feature/*'
          - 'hotfix/*'
      event:
        exclude:
          - tag
    depends_on:
      - restore-cache-with-filesystem

  - name: build
    image: node:lts-buster-slim
    commands:
      - yarn build
    when:
      branch:
        include:
          - main
          - develop
          - 'feature/*'
          - 'hotfix/*'
      event:
        exclude:
          - tag
    environment:
      DATO_API_TOKEN:
        from_secret: DATO_API_TOKEN
    depends_on:
      - install

  - name: rebuild-cache-with-filesystem
    image: meltwater/drone-cache:dev
    pull: 'always'
    volumes:
      - name: cache
        path: /usr/local/share/.cache
    when:
      event:
        exclude:
          - tag
    settings:
      rebuild: true
      cache_key: '{{ .Repo.Name }}-{{ checksum "yarn.lock" }}'
      archive_format: 'gzip'
      bucket: stiforr-drone-cache
      region: us-east-1
      # filesystem_cache_root: "/tmp/cache"
      mount:
        - './.cache'
        - './public'
        - '/usr/local/share/.cache'
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
    depends_on:
      - install
      - build

  - name: Test Chrome
    image: cypress/included:7.1.0
    when:
      event:
        exclude:
          - tag
    commands:
      - cypress install
      - yarn test:e2e:ci-chrome
    environment:
      DATO_API_TOKEN:
        from_secret: DATO_API_TOKEN
    depends_on:
      - install

  # - name: deploy
  #   image: stiforr/ci-tools:0.0.1
  #   commands:
  #     - yarn global add firebase-tools firebase-ci
  #     - firebase-ci deploy
  #   environment:
  #     FIREBASE_TOKEN:
  #       from_secret: FIREBASE_TOKEN
  #   when:
  #     branch:
  #       - main
  #     event:
  #       exclude:
  #         - pull_request
  #         - tag
  #   depends_on:
  #     - build

  - name: semantic-release
    image: stiforr/ci-tools:0.0.2
    pull: 'always'
    commands:
      - yarn semantic-release
    when:
      branch:
        - main
        - develop
      event:
        exclude:
          - pull_request
          - tag
    environment:
      GH_TOKEN:
        from_secret: GH_TOKEN
      REGISTRY_USERNAME:
        from_secret: REGISTRY_USERNAME
      REGISTRY_PASSWORD:
        from_secret: REGISTRY_PASSWORD
    depends_on:
      - build
      # - deploy
      - 'Test Chrome'

  - name: Helm Package
    image: stiforr/ci-tools:0.0.2
    pull: 'always'
    commands:
      - helm package k8s/treats-portfolio
    depends_on:
      - semantic-release

  - name: Helm Push
    image: stiforr/ci-tools:0.0.2
    pull: 'always'
    commands:
      - /scripts/helm-push.sh
      # - git push -u origin main
    depends_on:
      - 'Helm Package'

  - name: sentry-release
    image: stiforr/ci-tools:0.0.2
    pull: 'always'
    depends_on:
      - 'build'
    environment:
      SENTRY_PROJECT:
        from_secret: SENTRY_PROJECT
      SENTRY_AUTH_TOKEN:
        from_secret: SENTRY_AUTH_TOKEN
      SENTRY_ORG:
        from_secret: SENTRY_ORG
    commands:
      - export SENTRY_RELEASE=$DRONE_TAG
      - export SENTRY_ENVIRONMENT=$(/scripts/environment.sh)
      - sentry-cli --auth-token $SENTRY_AUTH_TOKEN releases new $SENTRY_RELEASE -p $SENTRY_PROJECT
      - sentry-cli --auth-token $SENTRY_AUTH_TOKEN releases set-commits $SENTRY_RELEASE --auto
      - sentry-cli --auth-token $SENTRY_AUTH_TOKEN releases files $SENTRY_RELEASE upload-sourcemaps ./public
      - sentry-cli --auth-token $SENTRY_AUTH_TOKEN releases finalize $SENTRY_RELEASE
      - sentry-cli --auth-token $SENTRY_AUTH_TOKEN releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT
    when:
      event:
        - tag

  - name: docker
    image: plugins/docker
    environment:
      DATO_API_TOKEN:
        from_secret: DATO_API_TOKEN
    settings:
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      repo: stiforr/treats-portfolio
      build_args_from_env:
        - DATO_API_TOKEN
      auto_tag: true
      tags:
        - latest

  # - name: discord notification
  #   image: appleboy/drone-discord
  #   settings:
  #     webhook_id:
  #       from_secret: discord_webhook_id
  #     webhook_token:
  #       from_secret: discord_webhook_token
  #     message: >
  #       {{#success build.status}}
  #         Docker build completed successfully!
  #       {{else}}
  #         Docker build failed
  #       {{/success}}
  #   depends_on:
  #     - 'docker'

volumes:
  - name: cache
    host:
      path: /tmp/drone/cache
